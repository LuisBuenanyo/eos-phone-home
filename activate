#!/usr/bin/env python3

import json
import os
import re
import subprocess
import sys
import urllib.request

class Activation(object):
    ACTIVATION_ENDPOINT = os.getenv('EOS_PHONE_HOME_ACTIVATE_URL', "https://home.endlessm.com/v1/activate")
    STATE_DIRECTORY = "/var/lib/eos-phone-home"

    ACTIVATION_VARIABLES = { 'live': 'is_live',
                             'image': 'image',
                             'release': 'release',
                             'vendor': 'vendor',
                             'product': 'product',
                             'serial': 'serial' }

    def _get_vendor(self):
        vendor = None

        try:
            if os.path.isdir('/sys/class/dmi/id'):
                with open('/sys/class/dmi/id/sys_vendor') as vendor_file:
                    vendor = vendor_file.read().strip()
            else:
                dt_data = None
                with open('/proc/device-tree/compatible') as dt_file:
                    dt_data = dt_file.read().strip()

                dt_fields = dt_data.split(',')
                vendor = dt_fields[0]
        except Exception as e:
            print("Unable to get vendor name!", e, file=sys.stderr)

        print(" - Found vendor:", vendor)

        return vendor.strip()

    def _get_product(self):
        product = None

        try:
            if os.path.isdir('/sys/class/dmi/id'):
                with open('/sys/class/dmi/id/product_name') as product_file:
                    product = product_file.read().strip()
            else:
                dt_data = None
                with open('/proc/device-tree/compatible') as dt_file:
                    dt_data = dt_file.read().strip()

                dt_fields = dt_data.split(',')
                product = dt_fields[1]
        except Exception as e:
            print("Unable to get product name!", e, file=sys.stderr)

        print(" - Found product:", product)

        return product.strip()

    def _get_image(self):
        image = None

        for path in ['/sysroot', '/']:
            try:
                image = subprocess.check_output(['attr', '-q', '-g', 'eos-image-version', path])
                image = image.decode(errors='replace').strip()
                print(" - Image from %s: %s" % (path, image))
                return image
            except Exception as e:
                print("Unable to get %s image name!" % (path, ), e, file=sys.stderr)

        return None

    def _get_release(self):
        release = None

        try:
            release_data = None
            with open('/etc/os-release') as release_file:
                release_data = release_file.read()

            release_data = re.split("\n", release_data, flags=re.M)
            for release_item in release_data:
                release_item = release_item.strip()

                key, value = release_item.split('=', 1)
                if key == 'VERSION':
                    print(' - Found version key')
                    if value.startswith('"') and value.endswith('"'):
                            value = value[1:-1]

                    release = value
                    print(' - Release:', release)
                    return release

        except Exception as e:
            print("Unable to get release name!", e, file=sys.stderr)

        return release.strip()

    def _get_serial(self):
        serial = None

        try:
            if os.path.isdir('/sys/class/dmi/id'):
                with open('/sys/class/dmi/id/product_serial') as ssn_file:
                    serial = ssn_file.read().strip()
            else:
                with open('/sys/class/endless_mfgdata/entries/SSN') as ssn_file:
                    serial = ssn_file.read().strip()
        except Exception as e:
            print("Unable to get serial! Check that you're running this as root!", e, file=sys.stderr)

        print(" - Found serial:", serial)

        return serial.strip()

    def _get_is_live(self):
        is_live = False

        command_line = None
        with open('/proc/cmdline', 'r') as command_line_file:
            command_line=command_line_file.read()

        print(" - Cmdline:", command_line.strip())

        if re.search(r'\bendless.live\b', command_line):
            print(" - Found is_live marker. Marking as live image.")
            is_live = True

        return is_live

    def _send_to_server(self, activation_data):
        success = False
        print("Sending data...")

        try:
            data = activation_data.encode('utf-8')

            req = urllib.request.Request(self.ACTIVATION_ENDPOINT, data = data, method = 'PUT')
            req.add_header('Content-Type', 'application/json')

            response_data = None
            with urllib.request.urlopen(req) as conn:
                response_data = conn.read().decode('utf-8')

            print('Response:', response_data)

            response = json.loads(response_data)

            if 'success' in response and \
               response['success'] == True:
                print("Server returned success message!")
                success = True
            else:
                print("Server failed to process the data:", response)

        except Exception as e:
            print("Sending failed!", e, file=sys.stderr)

        return success

    def run(self):
        if os.path.exists(os.path.join(self.STATE_DIRECTORY, 'activated')):
            print("Already activated! Exiting!")
            exit()

        if not os.path.isdir(self.STATE_DIRECTORY):
            print("State folder (%s) not found! Exiting!" % self.STATE_DIRECTORY, file=sys.stderr)
            exit(1)

        if not os.access(self.STATE_DIRECTORY, os.W_OK):
            print("State folder (%s) not writable! Exiting!" % self.STATE_DIRECTORY, file=sys.stderr)
            exit(1)

        print("Endpoint:", self.ACTIVATION_ENDPOINT)

        activation = {}
        for activation_var, activation_getter in self.ACTIVATION_VARIABLES.items():
            print("Getting activation variable:", activation_var)
            activation[activation_var] = getattr(self, '_get_' + activation_getter)()
            if activation[activation_var] == None or \
               activation[activation_var] == "":
                activation[activation_var] = "unknown"

        activation_data = json.dumps(activation)
        print("Activation data:", activation_data)

        print("Sending to server (%s)..." % self.ACTIVATION_ENDPOINT)

        if self._send_to_server(activation_data):
            # We're done, mark us ad complete
            with open(os.path.join(self.STATE_DIRECTORY, 'activated'), 'w'):
                pass

            print("Activated!")
        else:
            print("Could not send activation data to server! Exiting!", file=sys.stderr)
            exit(1)

if __name__ == '__main__':
    Activation().run()
